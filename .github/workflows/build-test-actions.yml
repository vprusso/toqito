name: check-build
permissions:
  contents: read
  id-token: write

on:
  pull_request:
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request
    types: [opened, reopened, converted_to_draft, ready_for_review, synchronize]
    branches:
      - master
  push:
    branches:
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-workflow-only-when-a-push-to-specific-branches-occurs
      - master

# Add the concurrency key here to cancel older runs on new pushes to the same PR.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  # Commit and push updated poetry.lock if the old one is outdated.
  poetry-check_lock:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
          # Add versions here to expand support matrix.
        python-version: ["3.10"]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}
          ref: ${{ github.head_ref }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry and check if poetry.lock is outdated
        run: |
          python -m pip install --upgrade pip
          pip install pipx
          pipx install poetry
          poetry check --lock || echo "outdated" > lock_status.txt
      - name: Update poetry.lock if needed
        if: ${{ hashFiles('lock_status.txt') != '' }}
        run: poetry lock --no-interaction
      - name: Commit and push updated poetry.lock
        if: ${{ hashFiles('lock_status.txt') != '' }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add poetry.lock
          git commit -m "[github-actions-bot] Auto-Commit: Update poetry.lock"
          git push origin HEAD:refs/heads/${{ github.head_ref }}

  code-style:
    needs: poetry-check_lock
    strategy:
      fail-fast: false
      matrix:
          # Add versions here to expand support matrix.
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/ruff-action@v3
        with:
          args: "format --check --diff"
      - run: ruff check --fix
      # https://github.com/astral-sh/ruff-action
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install blas, lapack for Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y libblas-dev liblapack-dev
      - name: Install toqito + dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipx
          pipx install poetry
          poetry install --without docs --no-interaction


  toqito-pytest:
    needs: poetry-check_lock
    strategy:
      fail-fast: false
      matrix:
        # Add versions here to expand support matrix.
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
        # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs#using-a-matrix-strategy
    env:
      PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install blas, lapack for Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y libblas-dev liblapack-dev
      - name: Install blas, lapack for macOS
        if: runner.os == 'macOS'
        run: |
          brew install openblas lapack
      - name: Install toqito + dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipx
          pipx install poetry
          poetry install --with dev --without docs,lint --no-interaction
      - name: Run tests
        run: poetry run pytest -v --cov-config=.coveragerc --cov-report=xml --cov-report term-missing:skip-covered --cov=toqito
      - name: Upload coverage information
        uses: codecov/codecov-action@v5
        with:
          token: 42c62957-6808-41de-af29-3bbc4f8f0867
          name: codecov-umbrella
          fail_ci_if_error: true
          files: ./coverage.xml
          verbose: true
      - name: Build artifacts
        run: poetry build

